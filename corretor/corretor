#!/bin/bash
#########################
# EXECUTAR TESTES
#########################
  COUNTER=0
  GRADE=0
  if [ "$1" == "" ]; then
    let rem=0
  else
    let rem=$1
  fi
  read -p 'Quantidade de casos de teste: ' qtdteste
  if [ ! -d "./ent" ]; then
    mkdir ent
  fi
  if [ ! -d "./out" ]; then
    mkdir out
  fi
  if [ ! -d "./gab" ]; then
    mkdir gab
  fi
  ./gen.py $qtdteste
###################################################caso tenha codigo correto
  gcc gabarito.c
  i=0
  while [ $i -lt $qtdteste ]; do
    let i=i+1
    ./a.out < ./ent/entrada$i.txt > ./gab/gabarito$i.txt
  done
###################################################
  gcc teste.c
  let i=0
  while [ $i -lt $qtdteste ]; do
    let i=i+1
    ./a.out < ./ent/entrada$i.txt > ./out/saida$i.txt
  done
  let i=0
  while [ $i -lt $qtdteste ]; do
    let COUNTER=COUNTER+1
    let i=i+1
    DIFF=$(diff -w ./out/saida$i.txt ./gab/gabarito$i.txt)
    if [ "$DIFF" == "" ]; then
      let GRADE=GRADE+1
      echo "$COUNTER ok"
      if [ "$rem" -eq "1" ]; then
        rm ./ent/entrada$i.txt
        rm ./out/saida$i.txt
        rm ./gab/gabarito$i.txt
      fi
    else
      echo "$COUNTER incorreto ($f)"
    fi
  done
  rm ./a.out
  echo -n "Nota "
  echo -n $(echo "scale=2; $GRADE*10/$COUNTER" | bc)
  echo " ($GRADE de $COUNTER)"
  if [ "$rem" -eq "2" ] && [ "$GRADE" -eq "$COUNTER" ]; then
    rm -rf ent
    rm -rf out
    rm -rf gab
  fi
